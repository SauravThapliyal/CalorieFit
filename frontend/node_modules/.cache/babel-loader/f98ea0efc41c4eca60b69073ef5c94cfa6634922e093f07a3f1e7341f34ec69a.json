{"ast":null,"code":"import _objectSpread from\"C:/Users/GL-Saurav/Desktop/new/new/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{Container,Typography,Box,Card,CardContent,TextField,Button,Dialog,DialogTitle,DialogContent,DialogActions,FormControl,InputLabel,Select,MenuItem,Chip,Alert,CircularProgress}from'@mui/material';import{Add,Search,Restaurant}from'@mui/icons-material';import{foodApi,dietLogApi}from'../services/api';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const WorkingNutrition=()=>{const[foods,setFoods]=useState([]);const[searchTerm,setSearchTerm]=useState('');const[selectedCategory,setSelectedCategory]=useState('');const[categories,setCategories]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState('');// Add Food Dialog\nconst[addFoodOpen,setAddFoodOpen]=useState(false);const[newFood,setNewFood]=useState({name:'',description:'',caloriesPer100g:0,proteinPer100g:0,carbsPer100g:0,fatPer100g:0,fiberPer100g:0,category:''});// Log Food Dialog\nconst[logFoodOpen,setLogFoodOpen]=useState(false);const[selectedFood,setSelectedFood]=useState(null);const[quantity,setQuantity]=useState('100');const[mealType,setMealType]=useState('Breakfast');useEffect(()=>{fetchFoods();fetchCategories();},[]);useEffect(()=>{fetchFoods();},[searchTerm,selectedCategory]);const fetchFoods=async()=>{setLoading(true);try{const params={};if(searchTerm)params.search=searchTerm;if(selectedCategory)params.category=selectedCategory;const response=await foodApi.getAll(params);// Ensure response is always an array\nsetFoods(Array.isArray(response)?response:[]);setError('');}catch(err){console.error('Error fetching foods:',err);setError('Failed to fetch foods. Please try again.');setFoods([]);// Set empty array on error\n}finally{setLoading(false);}};const fetchCategories=async()=>{try{const response=await foodApi.getCategories();setCategories(Array.isArray(response)?response:[]);}catch(err){console.error('Error fetching categories:',err);setCategories([]);// Set empty array on error\n}};const handleCreateFood=async()=>{try{await foodApi.create(newFood);setAddFoodOpen(false);setNewFood({name:'',description:'',caloriesPer100g:0,proteinPer100g:0,carbsPer100g:0,fatPer100g:0,fiberPer100g:0,category:''});fetchFoods();setError('');}catch(err){console.error('Error creating food:',err);setError('Failed to create food. Please try again.');}};const handleLogFood=async()=>{if(!selectedFood)return;try{const logData={foodId:selectedFood.id,quantity:parseFloat(quantity),unit:'grams',mealType:mealType};await dietLogApi.logFood(logData);setLogFoodOpen(false);setSelectedFood(null);setQuantity('100');setError('');}catch(err){console.error('Error logging food:',err);setError('Failed to log food. Please try again.');}};const calculateNutrition=(food,qty)=>{const multiplier=qty/100;return{calories:Math.round(food.caloriesPer100g*multiplier),protein:Math.round(food.proteinPer100g*multiplier*10)/10,carbs:Math.round(food.carbsPer100g*multiplier*10)/10,fat:Math.round(food.fatPer100g*multiplier*10)/10};};return/*#__PURE__*/_jsxs(Container,{maxWidth:\"lg\",children:[/*#__PURE__*/_jsxs(Box,{sx:{mb:4},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",component:\"h1\",gutterBottom:true,children:\"Nutrition Tracker\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body1\",color:\"text.secondary\",children:\"Search for foods and log your meals\"})]}),error&&/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mb:3},children:error}),/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',gap:2,mb:3,flexWrap:'wrap'},children:[/*#__PURE__*/_jsx(TextField,{placeholder:\"Search foods...\",value:searchTerm,onChange:e=>setSearchTerm(e.target.value),InputProps:{startAdornment:/*#__PURE__*/_jsx(Search,{sx:{mr:1,color:'text.secondary'}})},sx:{flex:1,minWidth:250}}),/*#__PURE__*/_jsxs(FormControl,{sx:{minWidth:150},children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Category\"}),/*#__PURE__*/_jsxs(Select,{value:selectedCategory,onChange:e=>setSelectedCategory(e.target.value),label:\"Category\",children:[/*#__PURE__*/_jsx(MenuItem,{value:\"\",children:\"All Categories\"}),(Array.isArray(categories)?categories:[]).map(category=>/*#__PURE__*/_jsx(MenuItem,{value:category,children:category},category))]})]}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",startIcon:/*#__PURE__*/_jsx(Add,{}),onClick:()=>setAddFoodOpen(true),children:\"Add Custom Food\"})]}),loading?/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',py:4},children:/*#__PURE__*/_jsx(CircularProgress,{})}):/*#__PURE__*/_jsx(Box,{sx:{display:'flex',flexWrap:'wrap',gap:2},children:(Array.isArray(foods)?foods:[]).map(food=>/*#__PURE__*/_jsx(Card,{sx:{width:300},children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:food.name}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",sx:{mb:2},children:food.description}),/*#__PURE__*/_jsx(Chip,{label:food.category,size:\"small\",sx:{mb:2}}),/*#__PURE__*/_jsxs(Box,{sx:{mb:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:/*#__PURE__*/_jsx(\"strong\",{children:\"Per 100g:\"})}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Calories: \",food.caloriesPer100g,\" | Protein: \",food.proteinPer100g,\"g\"]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Carbs: \",food.carbsPer100g,\"g | Fat: \",food.fatPer100g,\"g\"]})]}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",fullWidth:true,startIcon:/*#__PURE__*/_jsx(Restaurant,{}),onClick:()=>{setSelectedFood(food);setLogFoodOpen(true);},children:\"Log Food\"})]})},food.id))}),(Array.isArray(foods)?foods:[]).length===0&&!loading&&/*#__PURE__*/_jsxs(Box,{sx:{textAlign:'center',py:4},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",color:\"text.secondary\",children:\"No foods found\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:\"Try adjusting your search or add a custom food\"})]}),/*#__PURE__*/_jsxs(Dialog,{open:addFoodOpen,onClose:()=>setAddFoodOpen(false),maxWidth:\"sm\",fullWidth:true,children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"Add Custom Food\"}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',flexDirection:'column',gap:2,pt:1},children:[/*#__PURE__*/_jsx(TextField,{label:\"Food Name\",value:newFood.name,onChange:e=>setNewFood(_objectSpread(_objectSpread({},newFood),{},{name:e.target.value})),fullWidth:true,required:true}),/*#__PURE__*/_jsx(TextField,{label:\"Description\",value:newFood.description,onChange:e=>setNewFood(_objectSpread(_objectSpread({},newFood),{},{description:e.target.value})),fullWidth:true,multiline:true,rows:2}),/*#__PURE__*/_jsx(TextField,{label:\"Category\",value:newFood.category,onChange:e=>setNewFood(_objectSpread(_objectSpread({},newFood),{},{category:e.target.value})),fullWidth:true,required:true}),/*#__PURE__*/_jsx(TextField,{label:\"Calories per 100g\",type:\"number\",value:newFood.caloriesPer100g,onChange:e=>setNewFood(_objectSpread(_objectSpread({},newFood),{},{caloriesPer100g:parseFloat(e.target.value)||0})),fullWidth:true,required:true}),/*#__PURE__*/_jsx(TextField,{label:\"Protein per 100g (g)\",type:\"number\",value:newFood.proteinPer100g,onChange:e=>setNewFood(_objectSpread(_objectSpread({},newFood),{},{proteinPer100g:parseFloat(e.target.value)||0})),fullWidth:true}),/*#__PURE__*/_jsx(TextField,{label:\"Carbs per 100g (g)\",type:\"number\",value:newFood.carbsPer100g,onChange:e=>setNewFood(_objectSpread(_objectSpread({},newFood),{},{carbsPer100g:parseFloat(e.target.value)||0})),fullWidth:true}),/*#__PURE__*/_jsx(TextField,{label:\"Fat per 100g (g)\",type:\"number\",value:newFood.fatPer100g,onChange:e=>setNewFood(_objectSpread(_objectSpread({},newFood),{},{fatPer100g:parseFloat(e.target.value)||0})),fullWidth:true})]})}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:()=>setAddFoodOpen(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{onClick:handleCreateFood,variant:\"contained\",children:\"Add Food\"})]})]}),/*#__PURE__*/_jsxs(Dialog,{open:logFoodOpen,onClose:()=>setLogFoodOpen(false),maxWidth:\"sm\",fullWidth:true,children:[/*#__PURE__*/_jsxs(DialogTitle,{children:[\"Log Food: \",selectedFood===null||selectedFood===void 0?void 0:selectedFood.name]}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',flexDirection:'column',gap:2,pt:1},children:[/*#__PURE__*/_jsx(TextField,{label:\"Quantity (grams)\",type:\"number\",value:quantity,onChange:e=>setQuantity(e.target.value),fullWidth:true}),/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Meal Type\"}),/*#__PURE__*/_jsxs(Select,{value:mealType,onChange:e=>setMealType(e.target.value),label:\"Meal Type\",children:[/*#__PURE__*/_jsx(MenuItem,{value:\"Breakfast\",children:\"Breakfast\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"Lunch\",children:\"Lunch\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"Dinner\",children:\"Dinner\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"Snack\",children:\"Snack\"})]})]}),selectedFood&&quantity&&/*#__PURE__*/_jsxs(Box,{sx:{p:2,backgroundColor:'grey.50',borderRadius:1},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"subtitle2\",gutterBottom:true,children:[\"Nutrition for \",quantity,\"g:\"]}),(()=>{const nutrition=calculateNutrition(selectedFood,parseFloat(quantity)||0);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Calories: \",nutrition.calories]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Protein: \",nutrition.protein,\"g\"]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Carbs: \",nutrition.carbs,\"g\"]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Fat: \",nutrition.fat,\"g\"]})]});})()]})]})}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:()=>setLogFoodOpen(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{onClick:handleLogFood,variant:\"contained\",children:\"Log Food\"})]})]})]});};export default WorkingNutrition;","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Box","Card","CardContent","TextField","Button","Dialog","DialogTitle","DialogContent","DialogActions","FormControl","InputLabel","Select","MenuItem","Chip","Alert","CircularProgress","Add","Search","Restaurant","foodApi","dietLogApi","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","WorkingNutrition","foods","setFoods","searchTerm","setSearchTerm","selectedCategory","setSelectedCategory","categories","setCategories","loading","setLoading","error","setError","addFoodOpen","setAddFoodOpen","newFood","setNewFood","name","description","caloriesPer100g","proteinPer100g","carbsPer100g","fatPer100g","fiberPer100g","category","logFoodOpen","setLogFoodOpen","selectedFood","setSelectedFood","quantity","setQuantity","mealType","setMealType","fetchFoods","fetchCategories","params","search","response","getAll","Array","isArray","err","console","getCategories","handleCreateFood","create","handleLogFood","logData","foodId","id","parseFloat","unit","logFood","calculateNutrition","food","qty","multiplier","calories","Math","round","protein","carbs","fat","maxWidth","children","sx","mb","variant","component","gutterBottom","color","severity","display","gap","flexWrap","placeholder","value","onChange","e","target","InputProps","startAdornment","mr","flex","minWidth","label","map","startIcon","onClick","justifyContent","py","width","size","fullWidth","length","textAlign","open","onClose","flexDirection","pt","_objectSpread","required","multiline","rows","type","p","backgroundColor","borderRadius","nutrition"],"sources":["C:/Users/GL-Saurav/Desktop/new/new/frontend/src/pages/WorkingNutrition.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Typography,\n  Box,\n  Card,\n  CardContent,\n  TextField,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Alert,\n  CircularProgress,\n} from '@mui/material';\nimport {\n  Add,\n  Search,\n  Restaurant,\n} from '@mui/icons-material';\nimport { foodApi, dietLogApi } from '../services/api';\nimport { Food, CreateFoodRequest } from '../types';\n\nconst WorkingNutrition: React.FC = () => {\n  const [foods, setFoods] = useState<Food[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [categories, setCategories] = useState<string[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Add Food Dialog\n  const [addFoodOpen, setAddFoodOpen] = useState(false);\n  const [newFood, setNewFood] = useState<CreateFoodRequest>({\n    name: '',\n    description: '',\n    caloriesPer100g: 0,\n    proteinPer100g: 0,\n    carbsPer100g: 0,\n    fatPer100g: 0,\n    fiberPer100g: 0,\n    category: '',\n  });\n\n  // Log Food Dialog\n  const [logFoodOpen, setLogFoodOpen] = useState(false);\n  const [selectedFood, setSelectedFood] = useState<Food | null>(null);\n  const [quantity, setQuantity] = useState('100');\n  const [mealType, setMealType] = useState('Breakfast');\n\n  useEffect(() => {\n    fetchFoods();\n    fetchCategories();\n  }, []);\n\n  useEffect(() => {\n    fetchFoods();\n  }, [searchTerm, selectedCategory]);\n\n  const fetchFoods = async () => {\n    setLoading(true);\n    try {\n      const params: any = {};\n      if (searchTerm) params.search = searchTerm;\n      if (selectedCategory) params.category = selectedCategory;\n\n      const response = await foodApi.getAll(params);\n      // Ensure response is always an array\n      setFoods(Array.isArray(response) ? response : []);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching foods:', err);\n      setError('Failed to fetch foods. Please try again.');\n      setFoods([]); // Set empty array on error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCategories = async () => {\n    try {\n      const response = await foodApi.getCategories();\n      setCategories(Array.isArray(response) ? response : []);\n    } catch (err) {\n      console.error('Error fetching categories:', err);\n      setCategories([]); // Set empty array on error\n    }\n  };\n\n  const handleCreateFood = async () => {\n    try {\n      await foodApi.create(newFood);\n      setAddFoodOpen(false);\n      setNewFood({\n        name: '',\n        description: '',\n        caloriesPer100g: 0,\n        proteinPer100g: 0,\n        carbsPer100g: 0,\n        fatPer100g: 0,\n        fiberPer100g: 0,\n        category: '',\n      });\n      fetchFoods();\n      setError('');\n    } catch (err) {\n      console.error('Error creating food:', err);\n      setError('Failed to create food. Please try again.');\n    }\n  };\n\n  const handleLogFood = async () => {\n    if (!selectedFood) return;\n\n    try {\n      const logData = {\n        foodId: selectedFood.id,\n        quantity: parseFloat(quantity),\n        unit: 'grams',\n        mealType: mealType,\n      };\n\n      await dietLogApi.logFood(logData);\n      setLogFoodOpen(false);\n      setSelectedFood(null);\n      setQuantity('100');\n      setError('');\n    } catch (err) {\n      console.error('Error logging food:', err);\n      setError('Failed to log food. Please try again.');\n    }\n  };\n\n  const calculateNutrition = (food: Food, qty: number) => {\n    const multiplier = qty / 100;\n    return {\n      calories: Math.round(food.caloriesPer100g * multiplier),\n      protein: Math.round(food.proteinPer100g * multiplier * 10) / 10,\n      carbs: Math.round(food.carbsPer100g * multiplier * 10) / 10,\n      fat: Math.round(food.fatPer100g * multiplier * 10) / 10,\n    };\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Nutrition Tracker\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Search for foods and log your meals\n        </Typography>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Search and Filters */}\n      <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>\n        <TextField\n          placeholder=\"Search foods...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          InputProps={{\n            startAdornment: <Search sx={{ mr: 1, color: 'text.secondary' }} />,\n          }}\n          sx={{ flex: 1, minWidth: 250 }}\n        />\n\n        <FormControl sx={{ minWidth: 150 }}>\n          <InputLabel>Category</InputLabel>\n          <Select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n            label=\"Category\"\n          >\n            <MenuItem value=\"\">All Categories</MenuItem>\n            {(Array.isArray(categories) ? categories : []).map((category) => (\n              <MenuItem key={category} value={category}>\n                {category}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n\n        <Button\n          variant=\"contained\"\n          startIcon={<Add />}\n          onClick={() => setAddFoodOpen(true)}\n        >\n          Add Custom Food\n        </Button>\n      </Box>\n\n      {/* Foods List */}\n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n          <CircularProgress />\n        </Box>\n      ) : (\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\n          {(Array.isArray(foods) ? foods : []).map((food) => (\n            <Card key={food.id} sx={{ width: 300 }}>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  {food.name}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  {food.description}\n                </Typography>\n\n                <Chip label={food.category} size=\"small\" sx={{ mb: 2 }} />\n\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\">\n                    <strong>Per 100g:</strong>\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Calories: {food.caloriesPer100g} | Protein: {food.proteinPer100g}g\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Carbs: {food.carbsPer100g}g | Fat: {food.fatPer100g}g\n                  </Typography>\n                </Box>\n\n                <Button\n                  variant=\"contained\"\n                  fullWidth\n                  startIcon={<Restaurant />}\n                  onClick={() => {\n                    setSelectedFood(food);\n                    setLogFoodOpen(true);\n                  }}\n                >\n                  Log Food\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </Box>\n      )}\n\n      {(Array.isArray(foods) ? foods : []).length === 0 && !loading && (\n        <Box sx={{ textAlign: 'center', py: 4 }}>\n          <Typography variant=\"h6\" color=\"text.secondary\">\n            No foods found\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Try adjusting your search or add a custom food\n          </Typography>\n        </Box>\n      )}\n\n      {/* Add Food Dialog */}\n      <Dialog open={addFoodOpen} onClose={() => setAddFoodOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Add Custom Food</DialogTitle>\n        <DialogContent>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, pt: 1 }}>\n            <TextField\n              label=\"Food Name\"\n              value={newFood.name}\n              onChange={(e) => setNewFood({ ...newFood, name: e.target.value })}\n              fullWidth\n              required\n            />\n            <TextField\n              label=\"Description\"\n              value={newFood.description}\n              onChange={(e) => setNewFood({ ...newFood, description: e.target.value })}\n              fullWidth\n              multiline\n              rows={2}\n            />\n            <TextField\n              label=\"Category\"\n              value={newFood.category}\n              onChange={(e) => setNewFood({ ...newFood, category: e.target.value })}\n              fullWidth\n              required\n            />\n            <TextField\n              label=\"Calories per 100g\"\n              type=\"number\"\n              value={newFood.caloriesPer100g}\n              onChange={(e) => setNewFood({ ...newFood, caloriesPer100g: parseFloat(e.target.value) || 0 })}\n              fullWidth\n              required\n            />\n            <TextField\n              label=\"Protein per 100g (g)\"\n              type=\"number\"\n              value={newFood.proteinPer100g}\n              onChange={(e) => setNewFood({ ...newFood, proteinPer100g: parseFloat(e.target.value) || 0 })}\n              fullWidth\n            />\n            <TextField\n              label=\"Carbs per 100g (g)\"\n              type=\"number\"\n              value={newFood.carbsPer100g}\n              onChange={(e) => setNewFood({ ...newFood, carbsPer100g: parseFloat(e.target.value) || 0 })}\n              fullWidth\n            />\n            <TextField\n              label=\"Fat per 100g (g)\"\n              type=\"number\"\n              value={newFood.fatPer100g}\n              onChange={(e) => setNewFood({ ...newFood, fatPer100g: parseFloat(e.target.value) || 0 })}\n              fullWidth\n            />\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setAddFoodOpen(false)}>Cancel</Button>\n          <Button onClick={handleCreateFood} variant=\"contained\">\n            Add Food\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Log Food Dialog */}\n      <Dialog open={logFoodOpen} onClose={() => setLogFoodOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Log Food: {selectedFood?.name}</DialogTitle>\n        <DialogContent>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, pt: 1 }}>\n            <TextField\n              label=\"Quantity (grams)\"\n              type=\"number\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n              fullWidth\n            />\n\n            <FormControl fullWidth>\n              <InputLabel>Meal Type</InputLabel>\n              <Select\n                value={mealType}\n                onChange={(e) => setMealType(e.target.value)}\n                label=\"Meal Type\"\n              >\n                <MenuItem value=\"Breakfast\">Breakfast</MenuItem>\n                <MenuItem value=\"Lunch\">Lunch</MenuItem>\n                <MenuItem value=\"Dinner\">Dinner</MenuItem>\n                <MenuItem value=\"Snack\">Snack</MenuItem>\n              </Select>\n            </FormControl>\n\n            {selectedFood && quantity && (\n              <Box sx={{ p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Nutrition for {quantity}g:\n                </Typography>\n                {(() => {\n                  const nutrition = calculateNutrition(selectedFood, parseFloat(quantity) || 0);\n                  return (\n                    <>\n                      <Typography variant=\"body2\">Calories: {nutrition.calories}</Typography>\n                      <Typography variant=\"body2\">Protein: {nutrition.protein}g</Typography>\n                      <Typography variant=\"body2\">Carbs: {nutrition.carbs}g</Typography>\n                      <Typography variant=\"body2\">Fat: {nutrition.fat}g</Typography>\n                    </>\n                  );\n                })()}\n              </Box>\n            )}\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setLogFoodOpen(false)}>Cancel</Button>\n          <Button onClick={handleLogFood} variant=\"contained\">\n            Log Food\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default WorkingNutrition;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}